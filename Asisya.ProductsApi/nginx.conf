# nginx.conf (crear en la raíz del proyecto)
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Configuraciones básicas
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Optimizaciones para alta concurrencia
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=create_product:10m rate=50r/m;

    # Upstream para load balancing (si tienes múltiples instancias de API)
    upstream asisya_api {
        least_conn; # Balance por menor número de conexiones
        server api:80 max_fails=3 fail_timeout=30s;
        # server api2:80 max_fails=3 fail_timeout=30s; # Agregar más instancias aquí
        keepalive 32;
    }

    # Logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        server_name api.asisya.local localhost;

        # Rate limiting por endpoint
        location /api/Product {
            limit_req zone=create_product burst=20 nodelay;
            limit_req_status 429;
            
            proxy_pass http://asisya_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts optimizados
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings para mejor performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        location /api/ {
            limit_req zone=api burst=50 nodelay;
            limit_req_status 429;
            
            proxy_pass http://asisya_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health check endpoint sin rate limiting
        location /health {
            proxy_pass http://asisya_api/api/auth/test;
            access_log off;
        }

        # Servir archivos estáticos (si tienes frontend)
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # Error pages personalizadas
        error_page 429 @rate_limit_error;
        location @rate_limit_error {
            return 429 '{"error": "Rate limit exceeded", "message": "Too many requests, please try again later"}';
            add_header Content-Type application/json always;
        }
    }
}
